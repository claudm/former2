notes.txt
cli/node_modules
cli/deepmerge.js
cli/mappings.js
cli/datatables.js
cli/services
lib/drawio/src/main/webapp/WEB-INF/lib/appengine-api-1.0-sdk-1.9.63.jar
.DS_Store
diff --git a/cli/main.js b/cli/main.js
index 866d13e..aed81e2 100755
--- a/cli/main.js
+++ b/cli/main.js
@@ -105,6 +105,20 @@ f2log = function(msg){};
 f2trace = function(err){};
 
 async function main(opts) {
+    AWS.config = new AWS.Config();
+    process.env.AWS_SDK_LOAD_CONFIG="true";
+    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;
+    AWS.config.update({httpOptions: {agent: proxy("http://proxy:8080")},rejectedUnauthorized: true,}); 
+    const { fromSSO  } = require('@aws-sdk/credential-provider-sso');
+    const credentials = await fromSSO({ profile: "default" })();
+    // AWS.config.update({region: 'sa-east-1',credentials:credentials});   
+    // const { fromSSO  } = require('@aws-sdk/credential-provider-sso');
+    // const credentials = await fromSSO({ profile: "dev" })();
+    AWS.config.update({region: 'sa-east-1'});
+   
+    
+    // const { fromSSO } = require("@aws-sdk/credential-provider-sso");
+    // const credentials = await fromSSO({ profile: "dev" })();
     if (!opts.outputRawData && !opts.outputCloudformation && !opts.outputTerraform) {
         throw new Error('You must specify an output type');
     }
@@ -120,7 +134,10 @@ async function main(opts) {
     }
 
     if (opts.profile) {
-        AWS.config.credentials = new AWS.SharedIniFileCredentials({profile: opts.profile});
+        // AWS.config.credentials = new AWS.SharedIniFileCredentials({profile: opts.profile});
+
+        AWS.config.credentials= credentials
+        
     }
 
     if (AWS.config.region) {
@@ -164,6 +181,7 @@ async function main(opts) {
     outputMapTroposphere = function(){};
     outputMapPulumi = function(){};
     outputMapCdktf = function(){};
+    // outputMapBoto3 = function(){};
     if (!opts.outputCloudformation) { outputMapCfn = function(){}; }
     if (!opts.outputTerraform) { outputMapTf = function(){}; }
 
diff --git a/js/mappings.js b/js/mappings.js
index cee43c2..3e88c04 100755
--- a/js/mappings.js
+++ b/js/mappings.js
@@ -116,9 +116,36 @@ function ensureInitDeclaredGo(service, region) {
     return '';
 }
 
+function processTfCamelCasetoUnderline(key) {
+    
+      
+    var terraformConversionTable = {
+        'aws_glue_table': 'aws_glue_catalog_table',
+        'aws_glue_database': 'aws_glue_catalog_database',
+        'ConnectionProperties': 'connection_properties = ',
+        'DefaultArguments' : 'default_arguments = ',
+        'Parameters' : 'parameters =',
+        'S3Targets'   : "s3_target",
+        'SerdeInfo'  :'ser_de_info',
+        'tags'  :'tags = ',
+        // 'ingress': "ingress = ",
+        // 'egress': 'egress = ',
+
+     };
+    for (var k in terraformConversionTable) {
+        if (key == k) {
+            key = terraformConversionTable[k];
+        }
+    }
+    resut= key.replace(/([a-z0-9])([A-Z])/g, '$1_$2').toLowerCase();
+    return resut;
+}
+
 function processTfParameter(param, spacing, index, tracked_resources) {
+    
     var paramitems = [];
 
+
     if (param === undefined || param === null || (Array.isArray(param) && param.length == 0))
         return undefined;
     if (typeof param == "boolean") {
@@ -182,42 +209,102 @@ function processTfParameter(param, spacing, index, tracked_resources) {
         return `"${string_return}"`;
     }
     if (Array.isArray(param)) {
+        
         if (param.length == 0) {
-            return '[]';
-        }
-
+            return undefined;
+        }    
         param.forEach(paramitem => {
             paramitems.push(processTfParameter(paramitem, spacing + 4, index, tracked_resources));
         });
 
         return `[
 ` + ' '.repeat(spacing + 4) + paramitems.join(`,
-` + ' '.repeat(spacing + 4)) + `
+` + ' '.repeat(spacing)) + `
 ` + ' '.repeat(spacing) + `]`;
     }
     if (typeof param == "object") {
+    
+        // if (Object.keys(param).indexOf('Arguments') !== -1 ){
+        //     debugger;
+        //     console.log(param)
+        // };
         if (Object.keys(param).length === 0 && param.constructor === Object) {
-            return "{}";
+            return undefined;
         }
 
-        Object.keys(param).forEach(function (key) {
-            var subvalue = processTfParameter(param[key], spacing + 4, index, tracked_resources);
-            if (typeof subvalue !== "undefined") {
-                if (subvalue[0] == '{') {
-                    paramitems.push(key + " " + subvalue);
-                } else {
-                    if (key.match(/^[0-9]+$/g)) {
-                        key = "\"" + key + "\"";
+        Object.keys(param).forEach(function (key) {             
+            if (typeof param[key] !== "undefined" && param[key]  !== null ) {    
+                   
+                    if(Array.isArray(param[key]) ){
+                      
+                    
+                        
+                        // if(key != 'Subnets'){
+                        //     debugger;
+                        //     console.log(key)
+                        // }
+                        // codigo para resolver o problema com colunas do glue
+                        ignore= true;
+                        for (var [k, v] of Object.entries(param[key])){
+                           
+                            
+                            if ( typeof Object.entries(param[key])[k][1]  == "object" ){
+                                
+                              
+                                paramitems.push( processTfCamelCasetoUnderline(key) + processTfParameter(param[key][k], spacing + 6, index, tracked_resources));
+                            }
+                            else{
+                                ignore= false;                                 
+                                
+                            }
+                            
+            
+                        }
+                        
+                        if (  ignore  == false ){
+                          
+                            paramitems.push( processTfCamelCasetoUnderline(key) + " =  " + processTfParameter(param[key], spacing + 8, index, tracked_resources) + "");   
+                        }          
+                        
+                    }else{
+                       
+                        
+                        
+
+                        var subvalue = processTfParameter(param[key], spacing + 4, index, tracked_resources);
                     }
-                    paramitems.push(key + " = " + subvalue);
-                }
+                    if (typeof subvalue !== "undefined") {
+                        if (subvalue[0] == '{') {
+                        
+                        
+                            paramitems.push(processTfCamelCasetoUnderline(key) + " " + subvalue);  
+                            
+                        } else {
+                            if (key.match(/^[0-9]+$/g)) {
+                                paramitems.push(processTfCamelCasetoUnderline(key) + " " + subvalue);
+                                processTfCamelCasetoUnderline(key) = "\"" + processTfCamelCasetoUnderline(key) + "\"";
+                            }
+                            if (key.indexOf("--") >= 0 || key.indexOf(".") >= 0 || key.indexOf("/") >= 0  || key.indexOf(":") >= 0 ){
+                                paramitems.push("\"" + processTfCamelCasetoUnderline(key) + "\"" + " = " + subvalue);
+                            }else{
+                                if(key == 'description '){
+                                paramitems.push(processTfCamelCasetoUnderline(key) + " = " + " ");
+                                }
+                                else{
+                                    paramitems.push(processTfCamelCasetoUnderline(key) + " = " + subvalue);
+
+                                }
+                            }
+                        }
+                    }
+       
             }
         });
-
+        
         return `{
-` + ' '.repeat(spacing + 4) + paramitems.join(`
-` + ' '.repeat(spacing + 4)) + `
-` + ' '.repeat(spacing) + `}`;
+` + ' '.repeat(spacing +10) + paramitems.join(`
+` + ' '.repeat(spacing + 10)) + `
+` + ' '.repeat(spacing+ 4) + `}`;
     }
 
     return undefined;
@@ -317,7 +404,7 @@ function processPulumiParameter(param, spacing, index, tracked_resources) {
                         }, {
                             type: 'danger'
                         });
-                        f2log(JSON.stringify(param));
+                        // f2log(JSON.stringify(param));
                         f2trace(err);
                     }
                 }
@@ -2252,39 +2339,58 @@ ${cfnspacing}${cfnspacing}Properties:${params}
 function outputMapTf(index, service, type, options, region, was_blocked, logicalId, tracked_resources) {
     var output = '';
     var params = '';
-
+    // debugger;
     if (Object.keys(options).length) {
+       
+        
         for (option in options) {
+            // if(option == 'network_configuration'){
+            //     debugger;
+            // }
+          
             if (typeof options[option] !== "undefined" && options[option] !== null) {
+                
                 if (Array.isArray(options[option]) && typeof options[option][0] === 'object') {
+ 
                     for (var i = 0; i < options[option].length; i++) {
                         var optionvalue = processTfParameter(options[option][i], 4, index, tracked_resources);
                         if (typeof optionvalue !== "undefined") {
-                            if (optionvalue[0] == '{') {
+                            
+                            if (optionvalue[0] == '{') {                                
+                            
                                 params += `
-    ${option} ${optionvalue}`;
+        ${processTfCamelCasetoUnderline(option)} ${optionvalue}`;
                             } else {
                                 if (option.match(/^[0-9]+$/g)) {
-                                    option = "\"" + option + "\"";
+        processTfCamelCasetoUnderline(option) = "\"" + processTfCamelCasetoUnderline(option) + "\"";
                                 }
                                 params += `
-    ${option} = ${optionvalue}`;
+        ${processTfCamelCasetoUnderline(option)} = ${optionvalue}`;
                             }
                         }
 
                     }
+              
                 } else {
+                   
                     var optionvalue = processTfParameter(options[option], 4, index, tracked_resources);
+                    
                     if (typeof optionvalue !== "undefined") {
                         if (optionvalue[0] == '{') {
+                            // if( option == 'DefaultArguments'){
+                            //     debugger;
+                            //     print(option);
+                            // }
+                          
                             params += `
-    ${option} ${optionvalue}`;
+        ${processTfCamelCasetoUnderline(option)} ${optionvalue}`;
                         } else {
                             if (option.match(/^[0-9]+$/g)) {
-                                option = "\"" + option + "\"";
+                                params += `
+                                ${processTfCamelCasetoUnderline(option)} = ${processTfCamelCasetoUnderline(option)}`;
                             }
                             params += `
-    ${option} = ${optionvalue}`;
+        ${processTfCamelCasetoUnderline(option)}  = ${optionvalue}`;
                         }
                     }
                 }
@@ -2293,9 +2399,9 @@ function outputMapTf(index, service, type, options, region, was_blocked, logical
         params += `
 `;
     }
-
+    
     output += `
-resource "${type}" "${logicalId}" {${params}}
+resource "${processTfCamelCasetoUnderline(type.toLowerCase())}" "${logicalId}" {${params}}
 `;
 
     return output;
@@ -3960,7 +4066,7 @@ function compileOutputs(tracked_resources, cfn_deletion_policy) {
         }
     }
 
-    var region = 'us-east-1';
+    var region = 'sa-east-1';
     if (outputs[0]) {
         region = outputs[0].region;
     } else if (tracked_resources[0]) {
@@ -4435,7 +4541,7 @@ function performF2Mappings(objects) {
                 'pulumi': {},
                 'cdktf': {},
                 'iam': {}
-            };
+            };          
 
             var service_mapping_success = false;
             service_mapping_functions.forEach(service_mapping_function => {
@@ -4463,7 +4569,7 @@ function performF2Mappings(objects) {
                 }, {
                     type: 'warning'
                 });
-                f2log(JSON.stringify(obj));
+                // f2log(JSON.stringify(obj));
             }
         } catch (err) {
             $.notify({
diff --git a/js/services/ec2.js b/js/services/ec2.js
index c58cef3..f96e284 100644
--- a/js/services/ec2.js
+++ b/js/services/ec2.js
@@ -2012,8 +2012,9 @@ async function updateDatatableComputeEC2() {
 
         unblockUI('#section-compute-ec2-launchtemplates-datatable');
     });
-
+    // debugger;
     await sdkcall("ELBv2", "describeTargetGroups", {
+        
         // no params
     }, true).then(async (data) => {
         $('#section-compute-ec2-v2targetgroups-datatable').deferredBootstrapTable('removeAll');
@@ -2591,6 +2592,12 @@ service_mapping_functions.push(function(reqParams, obj, tracked_resources){
             }
         });
     } else if (obj.type == "elbv2.targetgroup") {
+        // debugger;
+        // reqParamsatt="";
+        
+              
+        reqParams.cfn['Port'] = obj.data.Port;
+        reqParams.tf['port'] = obj.data.Port;  
         var matcherHttpCode = null;
         if (obj.data.Matcher) {
             matcherHttpCode = obj.data.Matcher.HttpCode;
@@ -2600,7 +2607,7 @@ service_mapping_functions.push(function(reqParams, obj, tracked_resources){
             'path': obj.data.HealthCheckPath,
             'port': obj.data.HealthCheckPort,
             'protocol': obj.data.HealthCheckProtocol,
-            'timeout': obj.data.HealthCheckTimeoutSeconds,
+            // 'timeout': obj.data.HealthCheckTimeoutSeconds,
             'unhealthy_threshold': obj.data.UnhealthyThresholdCount,
             'healthy_threshold': obj.data.HealthyThresholdCount,
             'matcher': matcherHttpCode
@@ -2655,6 +2662,21 @@ service_mapping_functions.push(function(reqParams, obj, tracked_resources){
                 }
             }
         });
+     
+        reqParams= {'tf': {}}
+        reqParams.tf['target_id'] = obj.data.TargetGroupArn.substr(obj.data.TargetGroupArn.lastIndexOf("/", obj.data.TargetGroupArn.length)+1,obj.data.TargetGroupArn.length );
+        reqParams.tf['target_group_arn'] = obj.data.TargetGroupArn;
+        reqParams.tf['port'] = obj.data.Port;       
+ 
+        tracked_resources.push({
+            'obj': obj,
+            'logicalId': getResourceName('elbv2', obj.id, 'AWS::LoadBalancer::Target::Group::Attachent'),
+            'region': obj.region,
+            'service': 'elbv2',            
+            'terraformType': 'aws_lb_target_group_attachment',
+            'options':  reqParams      
+        });
+        
     } else if (obj.type == "ec2.volume") {
         reqParams.cfn['AvailabilityZone'] = obj.data.AvailabilityZone;
         reqParams.tf['availability_zone'] = obj.data.AvailabilityZone;
@@ -2740,16 +2762,16 @@ service_mapping_functions.push(function(reqParams, obj, tracked_resources){
                         reqParams.cfn['SecurityGroupIngress'].push({
                             'CidrIp': ipRange.CidrIp,
                             'Description': ipRange.Description,
-                            'FromPort': ipPermission.FromPort,
+                            'FromPort': (ipPermission.FromPort ? ipPermission.FromPort : '0') ,
                             'IpProtocol': ipPermission.IpProtocol,
-                            'ToPort': ipPermission.ToPort
+                            'ToPort': (ipPermission.ToPort ? ipPermission.ToPort :'0')
                         });
                         reqParams.tf['ingress'].push({
                             'cidr_blocks': [ipRange.CidrIp],
                             'description': ipRange.Description,
-                            'from_port': ipPermission.FromPort,
+                            'from_port': (ipPermission.FromPort ? ipPermission.FromPort : '0'),
                             'protocol': ipPermission.IpProtocol,
-                            'to_port': ipPermission.ToPort
+                            'to_port': (ipPermission.ToPort ? ipPermission.ToPort :'0')
                         });
                     });
                 }
@@ -2802,16 +2824,16 @@ service_mapping_functions.push(function(reqParams, obj, tracked_resources){
                         reqParams.cfn['SecurityGroupEgress'].push({
                             'CidrIp': ipRange.CidrIp,
                             'Description': ipRange.Description,
-                            'FromPort': ipPermissionsEgress.FromPort,
+                            'FromPort': (ipPermissionsEgress.FromPort ? ipPermissionsEgress.FromPort: "0") ,
                             'IpProtocol': ipPermissionsEgress.IpProtocol,
-                            'ToPort': ipPermissionsEgress.ToPort
+                            'ToPort': ( ipPermissionsEgress.ToPort ? ipPermissionsEgress.ToPort : "0")
                         });
                         reqParams.tf['egress'].push({
                             'cidr_blocks': [ipRange.CidrIp],
                             'description': ipRange.Description,
-                            'from_port': ipPermissionsEgress.FromPort,
+                            'from_port': (ipPermissionsEgress.FromPort ? ipPermissionsEgress.FromPort: "0"),
                             'protocol': ipPermissionsEgress.IpProtocol,
-                            'to_port': ipPermissionsEgress.ToPort
+                            'to_port': ( ipPermissionsEgress.ToPort ? ipPermissionsEgress.ToPort : "0")
                         });
                     });
                 }
@@ -3100,7 +3122,7 @@ service_mapping_functions.push(function(reqParams, obj, tracked_resources){
         }
         if (obj.data.LaunchTemplateData.CreditSpecification) {
             reqParams.tf['credit_specification'] = {
-                '': obj.data.LaunchTemplateData.CreditSpecification.CpuCredits
+                'cpu_credits': obj.data.LaunchTemplateData.CreditSpecification.CpuCredits
             };
         }
 
diff --git a/js/services/glue.js b/js/services/glue.js
index e36d1c7..d78ab93 100644
--- a/js/services/glue.js
+++ b/js/services/glue.js
@@ -955,7 +955,7 @@ async function updateDatatableAnalyticsGlue() {
         // no params
     }, true).then((data) => {
         $('#section-analytics-glue-connections-datatable').deferredBootstrapTable('removeAll');
-
+       
         data.ConnectionList.forEach(connection => {
             $('#section-analytics-glue-connections-datatable').deferredBootstrapTable('append', [{
                 f2id: connection.Name,
@@ -1187,12 +1187,20 @@ async function updateDatatableAnalyticsGlue() {
 
 service_mapping_functions.push(function(reqParams, obj, tracked_resources){
     if (obj.type == "glue.database") {
+        
+        reqParams.tf['Name'] = obj.data.Name;
+        reqParams.tf['Description'] = obj.data.Description;
+        reqParams.tf['LocationUri'] = obj.data.LocationUri;
+        reqParams.tf['Parameters'] = obj.data.Parameters;
+
         reqParams.cfn['DatabaseInput'] = {
             'Name': obj.data.Name,
             'Description': obj.data.Description,
             'LocationUri': obj.data.LocationUri,
             'Parameters': obj.data.Parameters
         };
+
+        // reqParams.tf['CatalogId'] = "${var.accountid}";
         reqParams.cfn['CatalogId'] = "!Ref \"AWS::AccountId\"";
 
         tracked_resources.push({
@@ -1201,23 +1209,43 @@ service_mapping_functions.push(function(reqParams, obj, tracked_resources){
             'region': obj.region,
             'service': 'glue',
             'type': 'AWS::Glue::Database',
+            'terraformType': 'AWS_Glue_Database',
             'options': reqParams
         });
     } else if (obj.type == "glue.table") {
+        
+        obj.data.StorageDescriptor['SerdeInfo']['Name'] = obj.data.DatabaseName;
+        
+        reqParams.tf['StorageDescriptor']=obj.data.StorageDescriptor;
+        
+        reqParams.tf['DatabaseName'] = obj.data.DatabaseName;
         reqParams.cfn['DatabaseName'] = obj.data.DatabaseName;
+
